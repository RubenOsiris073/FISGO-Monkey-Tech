ESTRUCTURA DEL PROYECTO FISGO-MONKEY-TECH
==========================================

VISIÓN GENERAL
==============
Sistema integral de gestión de productos y punto de venta (POS) con capacidades de detección mediante inteligencia artificial. Implementa una arquitectura cliente-servidor moderna con refactorización completa hacia un modelo de datos consolidado centrado en productos.

ARQUITECTURA REFACTORIZADA (2025)
=================================
✅ CONSOLIDACIÓN COMPLETADA:
- Eliminación de inventoryService.js y inventoryRoutes.js
- Integración completa de stock en productService.js
- Modelo de datos unificado: productos con campo 'cantidad' integrado
- Eliminación de colección separada de inventario en Firebase
- API centralizada para gestión de productos y stock

1. ARQUITECTURA GENERAL
=======================
- Aplicación dockerizada (Docker + Docker Compose)
- Arquitectura Cliente-Servidor con separación clara
- Microservicios ligeros con responsabilidades específicas
- Base de datos Firebase Firestore con modelo consolidado
- Sistema de autenticación Firebase Auth
- Despliegue containerizado con Nginx

2. BACKEND (Node.js + Express)
==============================

2.1. CONFIGURACIÓN
------------------
backend/config/
├── firebaseManager.js      # Configuración centralizada de Firebase Admin
├── config.js              # Variables de entorno y configuración
└── credentials/            # Credenciales encriptadas

2.2. ESTRUCTURA DE DATOS CONSOLIDADA
------------------------------------
COLECCIONES FIREBASE:
- products/                 # Colección principal (incluye stock integrado)
  ├── id                   # ID único del producto
  ├── nombre               # Nombre del producto
  ├── precio               # Precio unitario
  ├── categoria            # Categoría del producto
  ├── cantidad             # ✅ STOCK INTEGRADO (antes separado)
  ├── stockMinimo          # Stock mínimo para alertas
  ├── detectionId          # ID para mapeo con detección IA
  ├── precisionDeteccion   # Confianza de la detección
  ├── fechaCaducidad       # Fecha de vencimiento
  ├── perecedero           # Booleano si es perecedero
  ├── ubicacion            # Ubicación física
  └── ...                  # Otros campos del producto

- sales/                    # Ventas realizadas
- inventory_movements/      # Movimientos de stock (auditoría)

2.3. API REST CONSOLIDADA
-------------------------
backend/routes/
├── productRoutes.js        # ✅ CRUD completo + gestión de stock
│   ├── GET /api/products                    # Listar productos
│   ├── GET /api/products/:id               # Obtener producto específico
│   ├── POST /api/products                  # Crear producto
│   ├── PUT /api/products/:id               # Actualizar producto
│   ├── PUT /api/products/:id/stock         # ✅ Actualizar stock
│   └── DELETE /api/products/:id            # Eliminar producto
├── detectionRoutes.js      # Detección de productos con IA
│   ├── POST /api/detection/detect          # Detectar producto en imagen
│   ├── GET /api/detection/recent           # Obtener detecciones recientes
│   └── GET /api/detection/status           # Estado del servicio
├── salesRoutes.js          # Gestión de ventas
└── transactionsRoutes.js   # Transacciones financieras

❌ ELIMINADOS EN REFACTORIZACIÓN:
- inventoryRoutes.js        # Funcionalidad movida a productRoutes.js
- inventoryService.js       # Lógica integrada en productService.js

2.4. SERVICIOS REFACTORIZADOS
-----------------------------
backend/services/
├── productService.js       # ✅ SERVICIO PRINCIPAL CONSOLIDADO
│   ├── getAllProducts()                    # Obtener todos los productos
│   ├── createProduct()                     # Crear producto con stock inicial
│   ├── updateProductStock()                # ✅ Actualizar stock integrado
│   ├── getProductById()                    # Obtener producto específico
│   └── searchProducts()                    # Búsqueda de productos
├── detectionService.js     # Detección con TensorFlow.js
│   ├── performDetection()                  # Procesar imagen
│   ├── getRecentDetections()               # Historial de detecciones
│   └── findProductByLabel()                # Mapear detección a producto
├── salesService.js         # Procesamiento de ventas
│   └── updateProductStock()                # ✅ Usa productService
└── storageService.js       # Almacenamiento Firebase

2.5. SCRIPTS REFACTORIZADOS
---------------------------
backend/scripts/
├── initializeProducts.js   # ✅ Usa firebaseManager centralizado
├── cleanFakeSales.js      # ✅ Usa firestore admin
└── generateSales.js       # ✅ Usa firestore admin

2.6. MODELO DE IA
-----------------
backend/models/
├── metadata.json          # Metadatos del modelo TensorFlow
├── model.json            # Arquitectura de la red neuronal
└── weights.bin           # Pesos entrenados

3. FRONTEND (React.js)
======================

3.1. PÁGINAS PRINCIPALES
------------------------
frontend/src/pages/
├── ProductsPage.jsx                # Gestión de productos
├── ProductRegistrationPage.jsx    # ✅ NUEVA: Registro con detección IA
├── POSMainPage.jsx                # Punto de venta
├── SalesPage.jsx                  # Historial de ventas
├── DashboardPage.jsx              # Dashboard principal
└── AuthenticationPage.jsx         # Autenticación

3.2. COMPONENTES DE PRODUCTOS CON IA
-----------------------------------
frontend/src/components/products/
├── CameraDetectionComponent.jsx    # ✅ NUEVO: Cámara para detección
├── ProductRegistrationForm.jsx    # ✅ NUEVO: Formulario completo
├── ProductUpdateForm.jsx          # ✅ NUEVO: Actualización de stock
├── ProductGrid.jsx               # Cuadrícula de productos
├── ProductList.jsx               # Lista de productos
└── [otros componentes existentes]

3.3. SISTEMA POS REFACTORIZADO
------------------------------
frontend/src/components/pos/
├── POSView.jsx                    # ✅ Vista principal (sin webcam temporal)
├── ProductList.jsx               # Lista de productos
├── CartPanel.jsx                 # Panel del carrito
├── PaymentModal.jsx              # Modal de pago
└── hooks/
    ├── useCart.js                # Lógica del carrito
    ├── usePayment.js            # Procesamiento de pagos
    └── useProductData.js         # ✅ Datos de productos consolidados

3.4. SERVICIOS FRONTEND REFACTORIZADOS
--------------------------------------
frontend/src/services/
├── apiService.js                 # ✅ Cliente API consolidado
│   ├── getProducts()                      # Obtener productos
│   ├── createProduct()                    # ✅ NUEVO: Crear producto
│   ├── updateProductStock()               # ✅ Actualizar stock
│   ├── triggerDetection()                 # ✅ NUEVO: Detección IA
│   ├── getDetections()                    # ✅ NUEVO: Historial detecciones
│   └── getDetectionStatus()               # ✅ NUEVO: Estado detección
├── storageService.js             # ✅ Refactorizado para usar backend API
│   ├── getProducts()                      # ✅ Usa response.data.data
│   ├── getProductsWithSafeDates()         # ✅ Manejo de fechas
│   └── getDetections()                    # ✅ Usa apiService
└── firebase.js                  # Configuración Firebase Client

4. FLUJO DE DETECCIÓN DE PRODUCTOS IMPLEMENTADO
==============================================

4.1. FLUJO COMPLETO DE REGISTRO CON CÁMARA
------------------------------------------
```
[Inicio] → [Seleccionar Método] → [Activar Cámara] → [Capturar Imagen]
    ↓
[Enviar a Backend] → [Procesar con TensorFlow] → [¿Detección Exitosa?]
    ↓                                                      ↓
[Buscar Producto] → [¿Existe?] → [Formulario Simplificado] → [Actualizar Stock]
    ↓                    ↓
[Formulario Completo] → [Crear Producto] → [Establecer Stock Inicial]
```

4.2. COMPONENTES DEL FLUJO
--------------------------
- ProductRegistrationPage.jsx: Coordinador principal
- CameraDetectionComponent.jsx: Captura y detección
- ProductUpdateForm.jsx: Para actualizar stock de productos existentes
- ProductRegistrationForm.jsx: Para productos nuevos

4.3. ENDPOINTS DE DETECCIÓN
---------------------------
- POST /api/detection/detect: Procesar imagen
- GET /api/detection/recent: Historial de detecciones
- GET /api/detection/status: Estado del servicio

5. NAVEGACIÓN Y RUTAS
====================
frontend/src/App.jsx - Rutas principales:
├── /products                     # Gestión de productos
├── /products/new                 # Nuevo producto manual
├── /products/register            # ✅ NUEVO: Registro con cámara
├── /pos                         # Punto de venta
├── /sales                       # Historial de ventas
└── /dashboard                   # Dashboard principal

Navigation.jsx - Menú lateral:
├── "Productos" → /products
├── "Nuevo Producto" → /products/new
├── "Registrar con Cámara" → /products/register  # ✅ NUEVO
├── "Punto de Venta" → /pos
└── [otros enlaces]

6. TECNOLOGÍAS Y DEPENDENCIAS
=============================

6.1. BACKEND
------------
- Node.js + Express.js
- Firebase Admin SDK
- TensorFlow.js (Node)
- Multer para archivos
- CORS, Helmet (seguridad)

6.2. FRONTEND
-------------
- React.js 18+
- React Router DOM
- React Bootstrap
- React Icons
- Axios (HTTP client)
- React Webcam (para cámara)  # ✅ NUEVO

6.3. BASE DE DATOS
------------------
- Firebase Firestore (NoSQL)
- Firebase Authentication
- Firebase Storage (imágenes)

6.4. DEVOPS
-----------
- Docker + Docker Compose
- Nginx (proxy reverso)
- Variables de entorno (.env)

7. ESTADO ACTUAL DEL PROYECTO
=============================

✅ COMPLETADO:
- Refactorización completa del modelo de datos
- Eliminación de inventoryService e inventoryRoutes
- Consolidación de stock en productService
- Sistema de detección con cámara implementado
- Flujo completo de registro de inventario
- API endpoints para detección
- Componentes frontend para registro con IA
- Navegación actualizada
- Scripts de backend refactorizados

🔄 EN PROGRESO:
- Testing del flujo completo de detección
- Optimización de la precisión del modelo IA
- Mejoras en la interfaz de usuario

📋 PENDIENTE:
- Documentación de API completa
- Tests unitarios y de integración
- Optimización de rendimiento
- Deployment en producción

8. PATRONES ARQUITECTÓNICOS
==========================
- Single Source of Truth: Productos con stock integrado
- Repository Pattern: Abstracción de acceso a datos
- Service Layer: Lógica de negocio centralizada
- Component Composition: Reutilización de componentes React
- Custom Hooks: Lógica reutilizable en frontend
- API Gateway Pattern: Centralización de endpoints

9. SEGURIDAD
============
- Autenticación Firebase Auth
- Autorización por rutas protegidas
- Validación de datos en backend
- Sanitización de inputs
- CORS configurado
- Headers de seguridad (Helmet)

10. MONITOREO Y LOGS
===================
- Sistema de logging centralizado
- Métricas de detección IA
- Auditoría de movimientos de stock
- Logs de errores y excepciones


